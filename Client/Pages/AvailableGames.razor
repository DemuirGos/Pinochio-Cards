@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager

<MudPaper Width="100%" Class="pa-4 mud-height-full">
    <MudGrid>
        <MudAppBar Color="Color.Primary" Fixed="false">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" />
            <MudSpacer />
            <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" />
            <MudSpacer />
            <MudPaper Width="30vw">
                <MudAutocomplete T="string" Label="RoomId" @bind-Value="searchTerm" SearchFunc="@Search2"
                            AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" 
                            Width="30vw"/>

            </MudPaper>
        </MudAppBar>
        @foreach(var game in Games){
            <MudItem xs="6" sm="3">
                <MudCard Height="30vh" Style="overflow-y:scroll;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@game.Name</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            @if(game.OwnerId == ConnectionId){
                                <MudIconButton OnClick="@(async () => await InitiateGame(@game.Id))" Icon="@Icons.Filled.Start" Color="Color.Default" />
                            }
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText>this game is : @game.State</MudText>
                        <MudText Typo="Typo.body2">this game has : @game.Size players</MudText>
                        @if(!game.Members.Contains(ConnectionId) && game.IsPrivate){
                            <MudTextField Label="password" HelperText="password" Class="mt-3"
                                @bind-Value="password"/>
                        }
                    </MudCardContent>
                    <MudCardActions>
                        @if(game.Members.Contains(ConnectionId)){
                            <MudButton OnClick= "@(async () => await LeaveRoom(@game.Id))" Variant="Variant.Text" Color="Color.Error" Disabled="@((game.State != PreState.Pending) || (ConnectionId == game.OwnerId))">Leave</MudButton>
                        } else {
                            <MudButton OnClick= "@(async () => await JoinRoom(@game.Id))" Variant="Variant.Text" Color="Color.Primary" Disabled="@((game.State != PreState.Pending) || (ConnectionId == game.OwnerId))">Join</MudButton>
                        }
                        <MudButton OnClick= "@(async () => await RemoveRoom(@game.Id))" Variant="Variant.Text" Color="Color.Secondary" Disabled="@(ConnectionId != game.OwnerId)">Remove</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</MudPaper>
@code {
    [Parameter] public HubConnection? Connection {get; set;}
    [Parameter] public string ConnectionId {get; set;}
    private List<RoomsData> games = new();
    private List<RoomsData> Games => games?.Where(g => g.Id.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase)).ToList();
    private string searchTerm = "";
    private string   password = "";

    protected override async Task OnParametersSetAsync()
    {
        Connection.On<List<RoomsData>>("GetUpdate", (rooms) =>
        {
            games = rooms;
            StateHasChanged();
        });
        ConnectionId = await Connection.InvokeAsync<string>("GetId");
        games = await Connection.InvokeAsync<List<RoomsData>>("GetRooms");
    }


    private async Task<IEnumerable<string>> Search2(string value)
    {
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return games.Select(g => g.Id);
    }

    private async Task RemoveRoom(string roomId) {
        await Connection.InvokeAsync<List<RoomsData>>("RemoveGroup", roomId, ConnectionId);
    }

    private async Task JoinRoom(string roomId){
        await Connection.InvokeAsync("AddToGroup", roomId, ConnectionId, password);
        password = "";
    }

    private async Task<bool> CheckMembership(string roomId) {
        return await Connection.InvokeAsync<bool>("CheckMembership", roomId, ConnectionId);
    }
    
    private async Task LeaveRoom(string roomId) {
        await Connection.InvokeAsync("RemoveFromGroup", roomId, ConnectionId);
    }

    private async Task InitiateGame(string roomId) {
        await Connection.InvokeAsync("StartRoom", ConnectionId, roomId);
    }
}