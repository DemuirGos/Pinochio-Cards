@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
<MudCard Style="height : 50vh;">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Chat Room : </MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Height="30vh">
            <MudSimpleTable FixedHeader="true" Style="height:30vh;">
                <thead>
                    <tr>
                        @foreach (var (header, span) in headings)
                        {
                            <th rowspan="@span">@header</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (sender, message) in Messages)
                    {
                        <tr>
                            <td>@sender</td>
                            <td>@message</td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        </MudPaper>
        <MudPaper>
            <MudGrid>
                <MudItem xs="10">
                    <MudTextField @bind-Value="Message" Placeholder="Type your message here"/>
                </MudItem>
                <MudItem xs="2">
                    <MudButton OnClick="SendMessage" Variant="Variant.Outlined" Color="Color.Secondary">Send</MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudCardContent>
</MudCard>
@code {
    [Parameter] public HubConnection? HubConnection {get; set;}
    [Parameter] public string RoomId  {get; set;}
    [Parameter] public string UserId {get; set;}
    private string Message = "";
    List<(string, int)> headings = new(){
        ("Sender", 1),
        ("Message", 4),
    };
    private List<ChatMessage> Messages = new(){
        new ChatMessage("Game", "Game Started")
    };

    protected override async Task OnInitializedAsync()
    {
        HubConnection.On<ChatMessage>("GetMessage", (message) =>
        {
            Messages.Add(message);
            StateHasChanged();
        });
        HubConnection.On<string>("GetNotification", (notification) =>
        {
            Messages.Add(new ChatMessage("Game", notification));
            StateHasChanged();
        });
    }

    private async Task SendMessage(){
            Console.WriteLine("here message sent");
        await HubConnection.InvokeAsync("SendMessage",UserId, RoomId, Message);
    }
}